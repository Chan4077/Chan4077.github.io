<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://edricchan03.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://edricchan03.github.io/" rel="alternate" type="text/html" /><updated>2022-03-06T15:50:31+00:00</updated><id>https://edricchan03.github.io/feed.xml</id><title type="html">Edric’s website</title><subtitle>My personal Github pages website.</subtitle><entry><title type="html">TOTD: Solve differentiation/integration equations with this web calculator</title><link href="https://edricchan03.github.io/blog/2019/04/21/easy-calculus-differentiation-integration.html" rel="alternate" type="text/html" title="TOTD: Solve differentiation/integration equations with this web calculator" /><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><id>https://edricchan03.github.io/blog/2019/04/21/easy-calculus-differentiation-integration</id><content type="html" xml:base="https://edricchan03.github.io/blog/2019/04/21/easy-calculus-differentiation-integration.html"><![CDATA[<p><em>NOTE: This is not a sponsored post. I was not requested by the author of this website to write this post.</em></p>

<p>I discovered the calculators when looking up for a solution to an integration question.</p>

<p>The calculators are made by David Scherfgen.</p>

<!-- End of excerpt -->

<p>The calculators can be accessed by visiting the following URLS:</p>

<ul>
  <li><a href="https://derivative-calculator.net">Deriative calculator</a></li>
  <li><a href="https://integral-calculator.com">Integral calculator</a></li>
</ul>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="blog" /><category term="calculator" /><category term="calculus" /><category term="differentiation" /><category term="integration" /><category term="tip" /><category term="tip-of-the-day" /><summary type="html"><![CDATA[NOTE: This is not a sponsored post. I was not requested by the author of this website to write this post. I discovered the calculators when looking up for a solution to an integration question. The calculators are made by David Scherfgen.]]></summary></entry><entry><title type="html">[Update: New syntax] Inflating layouts with the ContentView annotation</title><link href="https://edricchan03.github.io/blog/programming/2019/03/16/simplified-content-views.html" rel="alternate" type="text/html" title="[Update: New syntax] Inflating layouts with the ContentView annotation" /><published>2019-03-16T00:00:00+00:00</published><updated>2019-03-16T00:00:00+00:00</updated><id>https://edricchan03.github.io/blog/programming/2019/03/16/simplified-content-views</id><content type="html" xml:base="https://edricchan03.github.io/blog/programming/2019/03/16/simplified-content-views.html"><![CDATA[<p>In this post, I’ll be covering how to simplify inflating layouts in your fragments/activities with the <a href="https://developer.android.com/reference/androidx/annotation/ContentView"><code class="language-plaintext highlighter-rouge">ContentView</code></a> annotation.</p>

<!-- End of excerpt -->

<p><em>Note: The <code class="language-plaintext highlighter-rouge">ContentView</code> annotation was introduced in version <code class="language-plaintext highlighter-rouge">1.1.0-alpha01</code> of the <code class="language-plaintext highlighter-rouge">androidx.annotation:annotation</code> library. See the <a href="https://developer.android.com/jetpack/androidx/releases/annotation#1.1.0-alpha01">release notes</a> for more info.</em></p>

<h2 id="update-442019">Update (4/4/2019)</h2>

<p>The <code class="language-plaintext highlighter-rouge">ContentView</code> annotation is now to be used as a constructor of <code class="language-plaintext highlighter-rouge">AppCompatActivity</code> or a <code class="language-plaintext highlighter-rouge">Fragment</code>. The former implementation has been removed in <a href="https://developer.android.com/jetpack/androidx/releases/activity#1.0.0-alpha06"><code class="language-plaintext highlighter-rouge">1.0.0-alpha06</code></a> of the <code class="language-plaintext highlighter-rouge">androidx.activity:activity</code> dependency and in <a href="https://developer.android.com/jetpack/androidx/releases/fragment#1.1.0-alpha06"><code class="language-plaintext highlighter-rouge">1.1.0-alpha05</code></a> of the <code class="language-plaintext highlighter-rouge">androidx.fragment:fragment</code> dependency.</p>

<p>Instead, use the following syntax:</p>

<h3 id="java-fragment">Java (Fragment)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.fragment.app.Fragment</span><span class="o">;</span>
<span class="c1">// ...</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeFragment</span> <span class="kd">extends</span> <span class="nc">Fragment</span> <span class="o">{</span>
  <span class="c1">// ...</span>
  <span class="kd">public</span> <span class="nf">HomeFragment</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Pass the layout resource ID to the super constructor</span>
    <span class="kd">super</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">frag_home</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-fragment">Kotlin (Fragment)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">androidx.fragment.app.Fragment</span>
<span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">HomeFragment</span><span class="p">:</span> <span class="nc">Fragment</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">frag_home</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="java-activity">Java (Activity)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.appcompat.app.AppCompatActivity</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>
  <span class="c1">// ...</span>
  <span class="kd">public</span> <span class="nf">MainActivity</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Pass the layout resource ID to the super constructor</span>
    <span class="kd">super</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-activity">Kotlin (Activity)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">androidx.appcompat.app.AppCompatActivity</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>This is probably what you use to inflate a layout - override the <code class="language-plaintext highlighter-rouge">onCreateView</code> to inflate a layout (for fragments) and return the instance, or to call <code class="language-plaintext highlighter-rouge">setContentView</code> in the <code class="language-plaintext highlighter-rouge">onCreate</code> method to set the layout.</p>

<h3 id="java-fragment-1">Java (Fragment)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.view.LayoutInflater</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.view.ViewGroup</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">androidx.fragment.app.Fragment</span><span class="o">;</span>
<span class="c1">// ...</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeFragment</span> <span class="kd">extends</span> <span class="nc">Fragment</span> <span class="o">{</span>
  <span class="c1">// ...</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">View</span> <span class="nf">onCreateView</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="nc">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="nc">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">frag_home</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-fragment-1">Kotlin (Fragment)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">android.os.Bundle</span>
<span class="k">import</span> <span class="nn">android.view.*</span>
<span class="k">import</span> <span class="nn">androidx.fragment.app.Fragment</span>
<span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">HomeFragment</span> <span class="p">:</span> <span class="nc">Fragment</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateView</span><span class="p">(</span><span class="n">inflater</span><span class="p">:</span> <span class="nc">LayoutInflater</span><span class="p">,</span> <span class="n">container</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">?,</span> <span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?):</span> <span class="nc">View</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">inflater</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">frag_home</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="java-activity-1">Java (Activity)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">androidx.appcompat.app.AppCompatActivity</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
    <span class="n">setContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-activity-1">Kotlin (Activity)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">android.os.Bundle</span>
<span class="k">import</span> <span class="nn">androidx.appcompat.AppCompatActivity</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This can now be simplified with the <code class="language-plaintext highlighter-rouge">ContentView</code> annotation. Just specify the layout resource ID as the parameter of the annotation and use it on the class definition.</p>

<h3 id="java-fragment-2">Java (Fragment)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.annotation.ContentView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">androidx.fragment.app.Fragment</span><span class="o">;</span>
<span class="c1">// ...</span>

<span class="nd">@ContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">frag_home</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeFragment</span> <span class="kd">extends</span> <span class="nc">Fragment</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-fragment-2">Kotlin (Fragment)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">androidx.annotation.ContentView</span>
<span class="k">import</span> <span class="nn">androidx.fragment.app.Fragment</span>
<span class="c1">// ...</span>

<span class="nd">@ContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">frag_home</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">HomeFragment</span><span class="p">:</span> <span class="nc">Fragment</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="java-activity-2">Java (Activity)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.annotation.ContentView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">androidx.appcompat.app.AppCompatActivity</span><span class="o">;</span>

<span class="nd">@ContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin-activity-2">Kotlin (Activity)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">androidx.annotation.ContentView</span>
<span class="k">import</span> <span class="nn">androidx.appcompat.app.AppCompatActivity</span>

<span class="nd">@ContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="notes">Notes</h2>

<ul>
  <li>The ability to use the <code class="language-plaintext highlighter-rouge">ContentView</code> annotation on a class that extends <a href="https://developer.android.com/reference/androidx/activity/ComponentActivity"><code class="language-plaintext highlighter-rouge">ComponentActivity</code></a> (which <a href="https://developer.android.com/reference/androidx/fragment/app/FragmentActivity"><code class="language-plaintext highlighter-rouge">FragmentActivity</code></a> directly and <a href="https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity"><code class="language-plaintext highlighter-rouge">AppCompatActivity</code></a> indirectly inherit from) was introduced in <code class="language-plaintext highlighter-rouge">1.0.0-alpha04</code> of the <code class="language-plaintext highlighter-rouge">androidx.activity:activity</code> dependency. (See the <a href="https://developer.android.com/jetpack/androidx/releases/activity#1.0.0-alpha04">release notes</a> for more info)</li>
  <li>The ability to use the <code class="language-plaintext highlighter-rouge">ContentView</code> annotation on a class that extends <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment"><code class="language-plaintext highlighter-rouge">Fragment</code></a> was introduced in <code class="language-plaintext highlighter-rouge">1.1.0-alpha04</code> of the <code class="language-plaintext highlighter-rouge">androidx.fragment:fragment</code> dependency. (See the <a href="https://developer.android.com/jetpack/androidx/releases/fragment#1.1.0-alpha04">release notes</a> for more info)</li>
</ul>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="blog" /><category term="programming" /><category term="kotlin" /><category term="androidx" /><category term="android" /><category term="annotation" /><summary type="html"><![CDATA[In this post, I’ll be covering how to simplify inflating layouts in your fragments/activities with the ContentView annotation.]]></summary></entry><entry><title type="html">Status Update | February</title><link href="https://edricchan03.github.io/blog/2019/02/24/status-update.html" rel="alternate" type="text/html" title="Status Update | February" /><published>2019-02-24T00:00:00+00:00</published><updated>2019-02-24T00:00:00+00:00</updated><id>https://edricchan03.github.io/blog/2019/02/24/status-update</id><content type="html" xml:base="https://edricchan03.github.io/blog/2019/02/24/status-update.html"><![CDATA[<p>This is a new form of blog post where I cover what I’ve done so far and plans for the following month. Expect to see this at the end of each month starting from February!</p>

<!-- End of excerpt -->

<h2 id="what-ive-done-in-february">What I’ve done in February</h2>

<ul>
  <li>I’ve enabled <a href="https://dependabot.com">Dependabot</a> on most of my repositories. So far, it’s much better than my previous setup involving Greenkeeper (which does not automatically resolve merge conflicts/rebase with the current project’s files).</li>
  <li>I’ve created a few projects which include:
    <ul>
      <li><a href="https://github.com/EdricChan03/actions">EdricChan03/actions</a> - A list of GitHub Actions</li>
    </ul>
  </li>
  <li>I’ve continued work on <a href="https://github.com/EdricChan03/ngx-ytd-api">EdricChan03/ngx-ytd-api</a> including restructuring the library by extracting the core functionality to a <code class="language-plaintext highlighter-rouge">common</code> entry point, enabled <a href="https://dependabot.com">Dependabot</a> and added initial schematics (which are currently not committed).</li>
</ul>

<h2 id="plans-for-march">Plans for March</h2>

<ul>
  <li>Release of <code class="language-plaintext highlighter-rouge">1.0.0-alpha.5</code> for <a href="https://github.com/EdricChan03/ngx-ytd-api">EdricChan03/ngx-ytd-api</a>
    <ul>
      <li>Bump to beta</li>
      <li>Fix bugs</li>
      <li>Full schematic support</li>
    </ul>
  </li>
  <li>Update my website
    <ul>
      <li>New blog posts</li>
      <li>Possible redesign of website</li>
      <li>Support dark mode</li>
    </ul>
  </li>
  <li>New release for <a href="https://github.com/EdricChan03/StudyBuddy">EdricChan03/StudyBuddy</a></li>
  <li>Initial API for <a href="https://github.com/EdricChan03/StudyBuddy-web">EdricChan03/StudyBuddy-web</a>
    <ul>
      <li>Update the hosted website</li>
      <li>TravisCI integration for automatic deploying</li>
    </ul>
  </li>
  <li>Take a short break from programming</li>
</ul>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="blog" /><category term="status-update" /><summary type="html"><![CDATA[This is a new form of blog post where I cover what I’ve done so far and plans for the following month. Expect to see this at the end of each month starting from February!]]></summary></entry><entry><title type="html">TIL: StackOverflow supports backticks</title><link href="https://edricchan03.github.io/til/stackoverflow/2019/02/06/stackoverflow-backtick.html" rel="alternate" type="text/html" title="TIL: StackOverflow supports backticks" /><published>2019-02-06T00:00:00+00:00</published><updated>2019-02-06T00:00:00+00:00</updated><id>https://edricchan03.github.io/til/stackoverflow/2019/02/06/stackoverflow-backtick</id><content type="html" xml:base="https://edricchan03.github.io/til/stackoverflow/2019/02/06/stackoverflow-backtick.html"><![CDATA[<p>Today I Learned that StackOverflow supports 3 backticks to create a code block, similar to a fenced code block in GitHub’s Flavoured Markdown.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;h1&gt;</span>Header!<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"paragraph1"</span><span class="nt">&gt;</span>Hello, HTML code!<span class="nt">&lt;/p&gt;</span>
<span class="p">```</span>
</code></pre></div></div>

<p>And here’s the other form of syntax for a code block on StackOverflow:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- language: lang-html --&gt;</span><span class="sb">

    &lt;h1&gt;Header!&lt;/h1&gt;
    &lt;p id="paragraph1"&gt;Hello, HTML code!&lt;/p&gt;
</span></code></pre></div></div>

<p>EDIT: I also learnt that it is possible to have 3 backticks in a code block. (See the source for this post for more info)</p>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="til" /><category term="stackoverflow" /><category term="stackoverflow" /><category term="markdown" /><summary type="html"><![CDATA[Today I Learned that StackOverflow supports 3 backticks to create a code block, similar to a fenced code block in GitHub’s Flavoured Markdown. ```html &lt;h1&gt;Header!&lt;/h1&gt; &lt;p id="paragraph1"&gt;Hello, HTML code!&lt;/p&gt; ``` And here’s the other form of syntax for a code block on StackOverflow: &lt;!-- language: lang-html --&gt; &lt;h1&gt;Header!&lt;/h1&gt; &lt;p id="paragraph1"&gt;Hello, HTML code!&lt;/p&gt; EDIT: I also learnt that it is possible to have 3 backticks in a code block. (See the source for this post for more info)]]></summary></entry><entry><title type="html">TIL: The greedy algorithm</title><link href="https://edricchan03.github.io/til/algorithm/2019/01/31/greedy-algorithm.html" rel="alternate" type="text/html" title="TIL: The greedy algorithm" /><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://edricchan03.github.io/til/algorithm/2019/01/31/greedy-algorithm</id><content type="html" xml:base="https://edricchan03.github.io/til/algorithm/2019/01/31/greedy-algorithm.html"><![CDATA[<p>Today I Learned about the <a href="https://brilliant.org/wiki/greedy-algorithm/">Greedy Algorithm</a>, which can be used to calculate the minimum elements required from a list that will sum up to a number.</p>

<p>For example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># An integer
</span><span class="n">S</span> <span class="o">=</span> <span class="mi">11</span>
<span class="c1"># A list of integers
</span><span class="n">V</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

<span class="s">"""
Write a function to determine the minimum number of elements in list V that can be summed up to S
"""</span>
<span class="k">def</span> <span class="nf">minElement</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">E</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
  <span class="c1"># V.sort()
</span>  <span class="c1"># Edge case where there can only be one element
</span>  <span class="k">if</span> <span class="n">S</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
  <span class="k">if</span> <span class="n">S</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="n">E</span>
  <span class="n">E</span><span class="o">+=</span><span class="mi">1</span>
  <span class="k">return</span> <span class="n">minElement</span><span class="p">(</span><span class="n">S</span><span class="o">-</span><span class="n">V</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">V</span><span class="p">,</span> <span class="n">E</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">minElement</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">V</span><span class="p">))</span>
</code></pre></div></div>

<p>(Note that this is Python)</p>

<p>The code above will output <code class="language-plaintext highlighter-rouge">3</code>.</p>

<p>Here’s a detailed explanation of how the code works:</p>

<ol>
  <li>First, the variables <code class="language-plaintext highlighter-rouge">S</code> and <code class="language-plaintext highlighter-rouge">V</code> are passed in to the function which is called in the last line. (In this example, <code class="language-plaintext highlighter-rouge">S</code> is <code class="language-plaintext highlighter-rouge">11</code> and <code class="language-plaintext highlighter-rouge">V</code> is <code class="language-plaintext highlighter-rouge">[1,2,5]</code>)</li>
  <li>Next, the variable <code class="language-plaintext highlighter-rouge">S</code> specified is checked if the number is <code class="language-plaintext highlighter-rouge">0</code>. This is an edge case as there can’t be any number of elements that can form <code class="language-plaintext highlighter-rouge">0</code>. (In this case, this zero check is skipped)</li>
  <li>Next, the variable <code class="language-plaintext highlighter-rouge">S</code> specified is checked if</li>
</ol>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="til" /><category term="algorithm" /><category term="python" /><category term="algorithm" /><summary type="html"><![CDATA[Today I Learned about the Greedy Algorithm, which can be used to calculate the minimum elements required from a list that will sum up to a number. For example: # An integer S = 11 # A list of integers V = [1,2,5] """ Write a function to determine the minimum number of elements in list V that can be summed up to S """ def minElement(S, V, E=0): # V.sort() # Edge case where there can only be one element if S == 0: return 0 if S &lt; 1: return E E+=1 return minElement(S-V[-1], V, E) print(minElement(S, V)) (Note that this is Python) The code above will output 3. Here’s a detailed explanation of how the code works: First, the variables S and V are passed in to the function which is called in the last line. (In this example, S is 11 and V is [1,2,5]) Next, the variable S specified is checked if the number is 0. This is an edge case as there can’t be any number of elements that can form 0. (In this case, this zero check is skipped) Next, the variable S specified is checked if]]></summary></entry><entry><title type="html">Code snippet of the week - code/pre elements</title><link href="https://edricchan03.github.io/blog/programming/2018/03/26/code-snippet-of-the-week-pre-code.html" rel="alternate" type="text/html" title="Code snippet of the week - code/pre elements" /><published>2018-03-26T00:00:00+00:00</published><updated>2018-03-26T00:00:00+00:00</updated><id>https://edricchan03.github.io/blog/programming/2018/03/26/code-snippet-of-the-week-pre-code</id><content type="html" xml:base="https://edricchan03.github.io/blog/programming/2018/03/26/code-snippet-of-the-week-pre-code.html"><![CDATA[<p><a name="top"></a></p>

<p><em>Note: This blog post originally appeared on my <a href="https://edricchan03.blogspot.com/2018/03/code-snippet-of-week-code-pre-elements.html">blog</a>.</em></p>

<p>Another code snippet! This week, I’ll be covering how to create code snippets with the <code class="language-plaintext highlighter-rouge">&lt;code&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> HTML tags.</p>

<p><em>Note: If you haven’t seen it, I’ve designed a new header image for these kind of posts! Look out for posts with the image on the top of the post!</em></p>

<!-- End of excerpt -->

<h1 id="getting-started">Getting Started</h1>

<p>To get started, ensure that you have a code editor (ideally <a href="https://code.visualstudio.com/">Visual Studio Code</a>, <a href="https://www.sublimetext.com/&quot;">Sublime Text</a>, <a href="https://atom.io/">Atom</a>, etc.).</p>

<ol>
  <li>Get started by downloading either of the coding editors as stated above (or you can search some online; <strong>don’t use your built-in text editor as this may screw things up in the encoding</strong>)</li>
  <li>Next, open up the code editor and create a new file. We’ll name the file <code class="language-plaintext highlighter-rouge">index.html</code>.</li>
  <li>
    <p>Create the bare minimal for an HTML file. Copy the code below:</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">&lt;!DOCTYPE html&gt;</span> <span class="c">&lt;!-- This is the line that is required in order for the page to work properly. --&gt;</span>
 <span class="nt">&lt;html&gt;</span>
 <span class="nt">&lt;head&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;title&gt;</span>Document title<span class="nt">&lt;/title&gt;</span>
     <span class="c">&lt;!-- I'm a comment! --&gt;</span>
     <span class="c">&lt;!-- Multiline comments
     are&lt;br&gt;
     okay too --&gt;</span>
 <span class="nt">&lt;/head&gt;</span>
 <span class="nt">&lt;body&gt;</span>
     <span class="c">&lt;!-- Your page content goes here --&gt;</span>
     <span class="nt">&lt;p&gt;</span>Hello, world!<span class="nt">&lt;/p&gt;</span>
 <span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="creating-code">Creating code</h2>

<p>To create code, surround some text with <code class="language-plaintext highlighter-rouge">&lt;code&gt;</code> (which can be optionally nested within a <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code>).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;pre&gt;&lt;code&gt;</span>Hello, World! Here is some useful content in a code block!<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div></div>

<p>See the MDN web docs for more info:</p>

<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"><code class="language-plaintext highlighter-rouge">&lt;code&gt;</code></a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre"><code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code></a></li>
</ul>

<h2 id="highlightjs-example">Highlight.js Example</h2>

<p>This example assumes that you’ve included <a href="https://highlightjs.org">Highlight.js</a> and that you’ve initialized Highlight.js in your main HTML file.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">"lang-html"</span><span class="nt">&gt;</span>
    <span class="ni">&amp;amp;</span>lt;p<span class="ni">&amp;amp;</span>gt;Displaying a code snippet within an actual code snippet? Codeception!<span class="ni">&amp;amp;</span>lt;/p<span class="ni">&amp;amp;</span>gt;
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div></div>

<h2 id="demo">Demo</h2>

<p>Here’s a working demo for you to play with!</p>

<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="zPdxPZ" data-user="Edric03" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/Edric03/pen/MVEdgb">
  Code/ Pre Element</a> by Edric Chan (<a href="https://codepen.io/Edric03">@Edric03</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="blog" /><category term="programming" /><category term="code-snippet-of-the-week" /><category term="html" /><summary type="html"><![CDATA[Note: This blog post originally appeared on my blog. Another code snippet! This week, I’ll be covering how to create code snippets with the &lt;code&gt; and &lt;pre&gt; HTML tags. Note: If you haven’t seen it, I’ve designed a new header image for these kind of posts! Look out for posts with the image on the top of the post!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://edricchan03.github.io/assets/code-snippet-of-the-week/header.png" /><media:content medium="image" url="https://edricchan03.github.io/assets/code-snippet-of-the-week/header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Code snippet of the week | Unordered and Ordered lists</title><link href="https://edricchan03.github.io/blog/programming/2017/12/11/code-snippet-of-the-week-ul-li.html" rel="alternate" type="text/html" title="Code snippet of the week | Unordered and Ordered lists" /><published>2017-12-11T00:00:00+00:00</published><updated>2017-12-11T00:00:00+00:00</updated><id>https://edricchan03.github.io/blog/programming/2017/12/11/code-snippet-of-the-week-ul-li</id><content type="html" xml:base="https://edricchan03.github.io/blog/programming/2017/12/11/code-snippet-of-the-week-ul-li.html"><![CDATA[<p><em>Note: This blog post originally appeared on my <a href="https://edricchan03.blogspot.com/2018/03/code-snippet-of-week-code-pre-elements.html">blog</a>.</em></p>

<p>Yes, it’s a code snippet! You heard that right. I’ll be trying to create a code snippet with pure HTML. (You can view the source code by pressing <kbd>Cmd</kbd>+<kbd>Option</kbd>+<kbd>U</kbd> or <kbd>Ctrl</kbd>+<kbd>U</kbd> if you’re on the desktop.)</p>

<!-- End of excerpt -->

<h1 id="notices">Notices</h1>

<ul>
  <li>I won’t show the getting started section again anymore after this.</li>
  <li>I’ll be using a tab indent of 4 spaces. You can use any code indent you want. (To format a document in Visual Studio Code, use <kbd>Shift</kbd>+<kbd>Option</kbd>+<kbd>F</kbd>)</li>
  <li>I’m assuming you have a computer. (If you don’t have one, then…)</li>
</ul>

<h1 id="getting-started">Getting Started</h1>

<p>To get started, ensure that you have a code editor (ideally <a href="https://code.visualstudio.com/">Visual Studio Code</a>, <a href="https://www.sublimetext.com/">Sublime Text</a>, <a href="https://atom.io/">Atom</a>, etc.).</p>

<ol>
  <li>Get started by downloading either of the coding editors as stated above (or you can search some online; <strong>DON’T USE YOUR BUILT-IN NOTEPAD/TEXTEDIT!!</strong>)</li>
  <li>Next, open up the code editor and create a new file. We’ll name the file <code class="language-plaintext highlighter-rouge">index.html</code></li>
  <li>Create the bare minimal for an HTML file. Copy the code below:</li>
</ol>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span> <span class="c">&lt;!-- This is the line that is required in order for the page to work properly. --&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document title<span class="nt">&lt;/title&gt;</span>
    <span class="c">&lt;!-- I'm a comment! --&gt;</span>
    <span class="c">&lt;!-- Multiline comments
    are
    okay too --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- Your page content goes here --&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello, world!<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="creating-an-unordered-list">Creating an unordered list</h2>

<p>To create an unordered list, simply use the <code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> element and add some list items to it by using the <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> element.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>List item contents<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>Unordered lists can be used for example, shopping lists, etc.</p>

<h2 id="creating-an-ordered-list">Creating an ordered list</h2>

<p>To create an ordered list, simply use the <code class="language-plaintext highlighter-rouge">&lt;ol&gt;</code> element and add some list items to it by using the <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> element.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>List item contents<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>
</code></pre></div></div>

<p>Ordered lists can be used for legal documentations, as well as questions, etc.</p>

<h2 id="demo">Demo</h2>

<p>Here’s a working demo for you to play with!</p>

<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="zPdxPZ" data-user="Edric03" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/Edric03/pen/zPdxPZ">
  Unordered &amp; Ordered lists</a> by Edric Chan (<a href="https://codepen.io/Edric03">@Edric03</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>]]></content><author><name>Edric Chan</name><email>edric.chan.1997@gmail.com</email></author><category term="blog" /><category term="programming" /><category term="code-snippet-of-the-week" /><category term="html" /><summary type="html"><![CDATA[Note: This blog post originally appeared on my blog. Yes, it’s a code snippet! You heard that right. I’ll be trying to create a code snippet with pure HTML. (You can view the source code by pressing Cmd+Option+U or Ctrl+U if you’re on the desktop.)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://edricchan03.github.io/assets/code-snippet-of-the-week/header.png" /><media:content medium="image" url="https://edricchan03.github.io/assets/code-snippet-of-the-week/header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>